"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _OCRDetectRegionsBody = _interopRequireDefault(require("../model/OCRDetectRegionsBody"));
var _OCRResponse = _interopRequireDefault(require("../model/OCRResponse"));
var _ProblemDetails = _interopRequireDefault(require("../model/ProblemDetails"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Aspose OCR Cloud 5.0 API
 * Aspose OCR Cloud 5.0 API
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* DetectRegions service.
* @module api/DetectRegionsApi
* @version 5.0
*/
var DetectRegionsApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new DetectRegionsApi. 
  * @alias module:api/DetectRegionsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function DetectRegionsApi(apiClient) {
    _classCallCheck(this, DetectRegionsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Callback function to receive the result of the cancelDetectRegions operation.
   * @callback module:api/DetectRegionsApi~cancelDetectRegionsCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * CancelDetectRegions
   * @param {String} id 
   * @param {module:api/DetectRegionsApi~cancelDetectRegionsCallback} callback The callback function, accepting three arguments: error, data, response
   */
  _createClass(DetectRegionsApi, [{
    key: "cancelDetectRegions",
    value: function cancelDetectRegions(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelDetectRegions");
      }
      var pathParams = {};
      var queryParams = {
        'id': id
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/v5.0/ocr/DetectRegions', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getDetectRegions operation.
     * @callback module:api/DetectRegionsApi~getDetectRegionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OCRResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetDetectRegions
     * @param {String} id 
     * @param {module:api/DetectRegionsApi~getDetectRegionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OCRResponse}
     */
  }, {
    key: "getDetectRegions",
    value: function getDetectRegions(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDetectRegions");
      }
      var pathParams = {};
      var queryParams = {
        'id': id
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _OCRResponse["default"];
      return this.apiClient.callApi('/v5.0/ocr/DetectRegions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the postDetectRegions operation.
     * @callback module:api/DetectRegionsApi~postDetectRegionsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PostDetectRegions
     * @param {module:model/OCRDetectRegionsBody} oCRDetectRegionsBody 
     * @param {module:api/DetectRegionsApi~postDetectRegionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
  }, {
    key: "postDetectRegions",
    value: function postDetectRegions(oCRDetectRegionsBody, callback) {
      var postBody = oCRDetectRegionsBody;
      // verify the required parameter 'oCRDetectRegionsBody' is set
      if (oCRDetectRegionsBody === undefined || oCRDetectRegionsBody === null) {
        throw new Error("Missing the required parameter 'oCRDetectRegionsBody' when calling postDetectRegions");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = 'String';
      return this.apiClient.callApi('/v5.0/ocr/DetectRegions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);
  return DetectRegionsApi;
}();