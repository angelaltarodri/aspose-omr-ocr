"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _TTSBody = _interopRequireDefault(require("../model/TTSBody"));
var _TTSResponse = _interopRequireDefault(require("../model/TTSResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Aspose OCR Cloud 5.0 API
 * Aspose OCR Cloud 5.0 API
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* ConvertTextToSpeechTrial service.
* @module api/ConvertTextToSpeechTrialApi
* @version 5.0
*/
var ConvertTextToSpeechTrialApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new ConvertTextToSpeechTrialApi. 
  * @alias module:api/ConvertTextToSpeechTrialApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function ConvertTextToSpeechTrialApi(apiClient) {
    _classCallCheck(this, ConvertTextToSpeechTrialApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Callback function to receive the result of the cancelConvertTextToSpeechTrial operation.
   * @callback module:api/ConvertTextToSpeechTrialApi~cancelConvertTextToSpeechTrialCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * CancelConvertTextToSpeechTrial
   * @param {String} id 
   * @param {module:api/ConvertTextToSpeechTrialApi~cancelConvertTextToSpeechTrialCallback} callback The callback function, accepting three arguments: error, data, response
   */
  _createClass(ConvertTextToSpeechTrialApi, [{
    key: "cancelConvertTextToSpeechTrial",
    value: function cancelConvertTextToSpeechTrial(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelConvertTextToSpeechTrial");
      }
      var pathParams = {};
      var queryParams = {
        'id': id
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/v5.0/ocr/ConvertTextToSpeechTrial', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getConvertTextToSpeechTrial operation.
     * @callback module:api/ConvertTextToSpeechTrialApi~getConvertTextToSpeechTrialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TTSResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetConvertTextToSpeechTrial
     * @param {String} id 
     * @param {module:api/ConvertTextToSpeechTrialApi~getConvertTextToSpeechTrialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TTSResponse}
     */
  }, {
    key: "getConvertTextToSpeechTrial",
    value: function getConvertTextToSpeechTrial(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getConvertTextToSpeechTrial");
      }
      var pathParams = {};
      var queryParams = {
        'id': id
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _TTSResponse["default"];
      return this.apiClient.callApi('/v5.0/ocr/ConvertTextToSpeechTrial', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the postConvertTextToSpeechTrial operation.
     * @callback module:api/ConvertTextToSpeechTrialApi~postConvertTextToSpeechTrialCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PostConvertTextToSpeechTrial
     * @param {module:model/TTSBody} tTSBody 
     * @param {module:api/ConvertTextToSpeechTrialApi~postConvertTextToSpeechTrialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
  }, {
    key: "postConvertTextToSpeechTrial",
    value: function postConvertTextToSpeechTrial(tTSBody, callback) {
      var postBody = tTSBody;
      // verify the required parameter 'tTSBody' is set
      if (tTSBody === undefined || tTSBody === null) {
        throw new Error("Missing the required parameter 'tTSBody' when calling postConvertTextToSpeechTrial");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = 'String';
      return this.apiClient.callApi('/v5.0/ocr/ConvertTextToSpeechTrial', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);
  return ConvertTextToSpeechTrialApi;
}();