/**
 * Aspose OCR Cloud 5.0 API
 * Aspose OCR Cloud 5.0 API
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OCRRecognizeImageBody from '../model/OCRRecognizeImageBody';
import OCRResponse from '../model/OCRResponse';
import ProblemDetails from '../model/ProblemDetails';

/**
* RecognizeImage service.
* @module api/RecognizeImageApi
* @version 5.0
*/
export default class RecognizeImageApi {

    /**
    * Constructs a new RecognizeImageApi. 
    * @alias module:api/RecognizeImageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelRecognizeImage operation.
     * @callback module:api/RecognizeImageApi~cancelRecognizeImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CancelRecognizeImage
     * @param {String} id 
     * @param {module:api/RecognizeImageApi~cancelRecognizeImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelRecognizeImage(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelRecognizeImage");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v5.0/ocr/RecognizeImage', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecognizeImage operation.
     * @callback module:api/RecognizeImageApi~getRecognizeImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OCRResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetRecognizeImage
     * @param {String} id 
     * @param {module:api/RecognizeImageApi~getRecognizeImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OCRResponse}
     */
    getRecognizeImage(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRecognizeImage");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OCRResponse;
      return this.apiClient.callApi(
        '/v5.0/ocr/RecognizeImage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRecognizeImage operation.
     * @callback module:api/RecognizeImageApi~postRecognizeImageCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PostRecognizeImage
     * @param {module:model/OCRRecognizeImageBody} oCRRecognizeImageBody 
     * @param {module:api/RecognizeImageApi~postRecognizeImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    postRecognizeImage(oCRRecognizeImageBody, callback) {
      let postBody = oCRRecognizeImageBody;
      // verify the required parameter 'oCRRecognizeImageBody' is set
      if (oCRRecognizeImageBody === undefined || oCRRecognizeImageBody === null) {
        throw new Error("Missing the required parameter 'oCRRecognizeImageBody' when calling postRecognizeImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v5.0/ocr/RecognizeImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
