/**
 * Aspose OCR Cloud 5.0 API
 * Aspose OCR Cloud 5.0 API
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OCRRecognizeRegionsBody from '../model/OCRRecognizeRegionsBody';
import OCRResponse from '../model/OCRResponse';
import ProblemDetails from '../model/ProblemDetails';

/**
* RecognizeRegions service.
* @module api/RecognizeRegionsApi
* @version 5.0
*/
export default class RecognizeRegionsApi {

    /**
    * Constructs a new RecognizeRegionsApi. 
    * @alias module:api/RecognizeRegionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelRecognizeRegions operation.
     * @callback module:api/RecognizeRegionsApi~cancelRecognizeRegionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CancelRecognizeRegions
     * @param {String} id 
     * @param {module:api/RecognizeRegionsApi~cancelRecognizeRegionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelRecognizeRegions(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelRecognizeRegions");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v5.0/ocr/RecognizeRegions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecognizeRegions operation.
     * @callback module:api/RecognizeRegionsApi~getRecognizeRegionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OCRResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetRecognizeRegions
     * @param {String} id 
     * @param {module:api/RecognizeRegionsApi~getRecognizeRegionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OCRResponse}
     */
    getRecognizeRegions(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRecognizeRegions");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OCRResponse;
      return this.apiClient.callApi(
        '/v5.0/ocr/RecognizeRegions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRecognizeRegions operation.
     * @callback module:api/RecognizeRegionsApi~postRecognizeRegionsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PostRecognizeRegions
     * @param {module:model/OCRRecognizeRegionsBody} oCRRecognizeRegionsBody 
     * @param {module:api/RecognizeRegionsApi~postRecognizeRegionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    postRecognizeRegions(oCRRecognizeRegionsBody, callback) {
      let postBody = oCRRecognizeRegionsBody;
      // verify the required parameter 'oCRRecognizeRegionsBody' is set
      if (oCRRecognizeRegionsBody === undefined || oCRRecognizeRegionsBody === null) {
        throw new Error("Missing the required parameter 'oCRRecognizeRegionsBody' when calling postRecognizeRegions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v5.0/ocr/RecognizeRegions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
