/**
 * Aspose OCR Cloud 5.0 API
 * Aspose OCR Cloud 5.0 API
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OCRResponse from '../model/OCRResponse';
import ProblemDetails from '../model/ProblemDetails';

/**
* ImageProcessing service.
* @module api/ImageProcessingApi
* @version 5.0
*/
export default class ImageProcessingApi {

    /**
    * Constructs a new ImageProcessingApi. 
    * @alias module:api/ImageProcessingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getResultFile operation.
     * @callback module:api/ImageProcessingApi~getResultFileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetResultFile
     * @param {String} id 
     * @param {module:api/ImageProcessingApi~getResultFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getResultFile(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResultFile");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['image/png'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v5.0/ocr/ImageProcessing/GetResultFile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResultTask operation.
     * @callback module:api/ImageProcessingApi~getResultTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OCRResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetResultTask
     * @param {String} id 
     * @param {module:api/ImageProcessingApi~getResultTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OCRResponse}
     */
    getResultTask(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResultTask");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OCRResponse;
      return this.apiClient.callApi(
        '/v5.0/ocr/ImageProcessing/GetResultTask', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBinarizationFile operation.
     * @callback module:api/ImageProcessingApi~postBinarizationFileCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PostBinarizationFile
     * @param {Object} opts Optional parameters
     * @param {File} opts.file 
     * @param {module:api/ImageProcessingApi~postBinarizationFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    postBinarizationFile(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['JWT'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v5.0/ocr/ImageProcessing/PostBinarizationFile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDewarpingFile operation.
     * @callback module:api/ImageProcessingApi~postDewarpingFileCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PostDewarpingFile
     * @param {Object} opts Optional parameters
     * @param {File} opts.file 
     * @param {module:api/ImageProcessingApi~postDewarpingFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    postDewarpingFile(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['JWT'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v5.0/ocr/ImageProcessing/PostDewarpingFile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSkewCorrectionFile operation.
     * @callback module:api/ImageProcessingApi~postSkewCorrectionFileCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PostSkewCorrectionFile
     * @param {Object} opts Optional parameters
     * @param {File} opts.file 
     * @param {module:api/ImageProcessingApi~postSkewCorrectionFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    postSkewCorrectionFile(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['JWT'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v5.0/ocr/ImageProcessing/PostSkewCorrectionFile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUpsamplingFile operation.
     * @callback module:api/ImageProcessingApi~postUpsamplingFileCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PostUpsamplingImageFile
     * @param {Object} opts Optional parameters
     * @param {File} opts.file 
     * @param {module:api/ImageProcessingApi~postUpsamplingFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    postUpsamplingFile(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['JWT'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v5.0/ocr/ImageProcessing/PostUpsamplingImageFile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
