/**
 * Aspose OCR Cloud 5.0 API
 * Aspose OCR Cloud 5.0 API
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DsrConfidence from './DsrConfidence';
import DsrMode from './DsrMode';
import Language from './Language';
import OCRRegion from './OCRRegion';
import ResultType from './ResultType';
import ResultTypeTable from './ResultTypeTable';

/**
 * The OCRSettingsRecognizeRegions model module.
 * @module model/OCRSettingsRecognizeRegions
 * @version 5.0
 */
class OCRSettingsRecognizeRegions {
    /**
     * Constructs a new <code>OCRSettingsRecognizeRegions</code>.
     * @alias module:model/OCRSettingsRecognizeRegions
     */
    constructor() { 
        
        OCRSettingsRecognizeRegions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OCRSettingsRecognizeRegions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OCRSettingsRecognizeRegions} obj Optional instance to populate.
     * @return {module:model/OCRSettingsRecognizeRegions} The populated <code>OCRSettingsRecognizeRegions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OCRSettingsRecognizeRegions();

            if (data.hasOwnProperty('language')) {
                obj['language'] = Language.constructFromObject(data['language']);
            }
            if (data.hasOwnProperty('makeSkewCorrect')) {
                obj['makeSkewCorrect'] = ApiClient.convertToType(data['makeSkewCorrect'], 'Boolean');
            }
            if (data.hasOwnProperty('makeSpellCheck')) {
                obj['makeSpellCheck'] = ApiClient.convertToType(data['makeSpellCheck'], 'Boolean');
            }
            if (data.hasOwnProperty('makeContrastCorrection')) {
                obj['makeContrastCorrection'] = ApiClient.convertToType(data['makeContrastCorrection'], 'Boolean');
            }
            if (data.hasOwnProperty('makeUpsampling')) {
                obj['makeUpsampling'] = ApiClient.convertToType(data['makeUpsampling'], 'Boolean');
            }
            if (data.hasOwnProperty('regions')) {
                obj['regions'] = ApiClient.convertToType(data['regions'], [OCRRegion]);
            }
            if (data.hasOwnProperty('resultType')) {
                obj['resultType'] = ResultType.constructFromObject(data['resultType']);
            }
            if (data.hasOwnProperty('Rotate')) {
                obj['Rotate'] = ApiClient.convertToType(data['Rotate'], 'Number');
            }
            if (data.hasOwnProperty('makeBinarization')) {
                obj['makeBinarization'] = ApiClient.convertToType(data['makeBinarization'], 'Boolean');
            }
            if (data.hasOwnProperty('dsrMode')) {
                obj['dsrMode'] = DsrMode.constructFromObject(data['dsrMode']);
            }
            if (data.hasOwnProperty('dsrConfidence')) {
                obj['dsrConfidence'] = DsrConfidence.constructFromObject(data['dsrConfidence']);
            }
            if (data.hasOwnProperty('resultTypeTable')) {
                obj['resultTypeTable'] = ResultTypeTable.constructFromObject(data['resultTypeTable']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OCRSettingsRecognizeRegions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OCRSettingsRecognizeRegions</code>.
     */
    static validateJSON(data) {
        if (data['regions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['regions'])) {
                throw new Error("Expected the field `regions` to be an array in the JSON data but got " + data['regions']);
            }
            // validate the optional field `regions` (array)
            for (const item of data['regions']) {
                OCRRegion.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/Language} language
 */
OCRSettingsRecognizeRegions.prototype['language'] = undefined;

/**
 * @member {Boolean} makeSkewCorrect
 * @default true
 */
OCRSettingsRecognizeRegions.prototype['makeSkewCorrect'] = true;

/**
 * @member {Boolean} makeSpellCheck
 * @default false
 */
OCRSettingsRecognizeRegions.prototype['makeSpellCheck'] = false;

/**
 * @member {Boolean} makeContrastCorrection
 * @default false
 */
OCRSettingsRecognizeRegions.prototype['makeContrastCorrection'] = false;

/**
 * @member {Boolean} makeUpsampling
 * @default false
 */
OCRSettingsRecognizeRegions.prototype['makeUpsampling'] = false;

/**
 * @member {Array.<module:model/OCRRegion>} regions
 */
OCRSettingsRecognizeRegions.prototype['regions'] = undefined;

/**
 * @member {module:model/ResultType} resultType
 */
OCRSettingsRecognizeRegions.prototype['resultType'] = undefined;

/**
 * @member {Number} Rotate
 */
OCRSettingsRecognizeRegions.prototype['Rotate'] = undefined;

/**
 * @member {Boolean} makeBinarization
 * @default true
 */
OCRSettingsRecognizeRegions.prototype['makeBinarization'] = true;

/**
 * @member {module:model/DsrMode} dsrMode
 */
OCRSettingsRecognizeRegions.prototype['dsrMode'] = undefined;

/**
 * @member {module:model/DsrConfidence} dsrConfidence
 */
OCRSettingsRecognizeRegions.prototype['dsrConfidence'] = undefined;

/**
 * @member {module:model/ResultTypeTable} resultTypeTable
 */
OCRSettingsRecognizeRegions.prototype['resultTypeTable'] = undefined;






export default OCRSettingsRecognizeRegions;

